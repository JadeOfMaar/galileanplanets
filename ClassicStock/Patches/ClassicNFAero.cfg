@PART[nfa-*]:HAS[@MODULE[ModuleResourceIntake]]:NEEDS[ClassicStock]
{
	+MODULE[ModuleResourceIntake]
	{
		@resourceName = IntakeAir
		@checkForOxygen = False
	}
	+RESOURCE[IntakeAir]
	{
		name = Atmosphere
	}
}
@PART[nfa-fuel*]:HAS[@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[*]]]:NEEDS[ClassicStock]
{
	MODULE
    {
        name = WBIOmniStorage
		...
        //In liters, how much can the part store. CRP uses 1-liter units so this is a direct conversion.
        storageVolume = #$../MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[*]]/baseVolume$
        
		//Skill required to reconfigure the container.
        reconfigureSkill = ConverterSkill

        //Minimum rank to reconfigure the container.
        reconfigureRank = 1

        //Resource required to reconfigure the container.
        requiredResource = Equipment

        //Amount of the required resource to reconfigure the container.
        requiredAmount = 0

        //Blacklisted resources that can't be added to the container.
        //Separate by semicolon.
        resourceBlacklist = GeoEnergy;ElectroPlasma;CoreHeat;Atmosphere;CompressedAtmosphere;LabTime;ExposureTime;ScopeTime;SolarReports;SimulatorTime;GravityWaves;IntakeAir;StaticCharge;EVA Propellant;Lead;Plants;CoreSamples;MJPropellant;SOCSFuel

        //Default resources
        DEFAULT_RESOURCE
        {
            name = LiquidFuel

            //Calculate base volume by pulling total LH2 capacity and divide by LH2 density (5 units LH2 per unit volume)
            //Don't forget the volume multiplier for Propellium!
            maxAmount = #$../storageVolume$
        }
    }
	!MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[*] {}
}
@PART[nfa-*]:HAS[@MODULE[ModuleEnginesFX]]:NEEDS[ClassicStock]
{
	@MODULE[ModuleEnginesFX]:HAS[@PROPELLANT[IntakeAtm]]
	{
		@PROPELLANT[IntakeAtm]
		{
			@name = Atmosphere
		}
	}
}
